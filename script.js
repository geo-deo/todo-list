/**
 * –ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏:
 * { id: string, text: string, done: boolean, createdAt: number, priority: "low"|"normal"|"high" }
 */
let tasks = [];
const LS_KEY = "tasks_v2";

/* ===== –ó–∞–≥—Ä—É–∑–∫–∞/–º–∏–≥—Ä–∞—Ü–∏—è ===== */
document.addEventListener("DOMContentLoaded", () => {
  const raw = localStorage.getItem(LS_KEY);
  if (raw) {
    try {
      const arr = JSON.parse(raw);
      if (Array.isArray(arr)) {
        tasks = arr.map(t => ({
          id: t.id || cryptoRandomId(),
          text: String(t.text ?? ""),
          done: !!t.done,
          createdAt: typeof t.createdAt === "number" ? t.createdAt : Date.now(),
          // –º–∏–≥—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ‚Äî —Å—Ç–∞–≤–∏–º normal
          priority: (t.priority === "low" || t.priority === "high" || t.priority === "normal") ? t.priority : "normal",
        }));
      }
    } catch { tasks = []; }
  }

  renderTasks();

  // —Å–æ–±—ã—Ç–∏—è UI
  document.getElementById("addBtn").addEventListener("click", addTask);
  document.getElementById("taskInput").addEventListener("keydown", e => {
    if (e.key === "Enter") addTask();
  });
  // export/import –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ —É —Ç–µ–±—è —É–∂–µ –±—ã–ª–∏
});

/* ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ===== */
function addTask() {
  const input = document.getElementById("taskInput");
  const priority = document.getElementById("prioritySelect")?.value || "normal";
  const text = input.value.trim();
  if (!text) return;

  tasks.push({
    id: cryptoRandomId(),
    text,
    done: false,
    createdAt: Date.now(),
    priority, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  });
  saveTasks();
  renderTasks();
  input.value = "";
}

/* ===== –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ===== */
function toggleDone(id) {
  const t = tasks.find(x => x.id === id);
  if (!t) return;
  t.done = !t.done;
  saveTasks();
  renderTasks();
}

function deleteTask(id) {
  const li = document.querySelector(`li.task[data-id="${id}"]`);
  if (li) {
    li.classList.add("fade-out");      // –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    setTimeout(() => {
      tasks = tasks.filter(x => x.id !== id);
      saveTasks();
      renderTasks();
    }, 200);
  } else {
    tasks = tasks.filter(x => x.id !== id);
    saveTasks();
    renderTasks();
  }
}

/* ===== –†–µ–Ω–¥–µ—Ä —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º/–¥–∞—Ç–æ–π/–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏) ===== */
function renderTasks() {
  const list = document.getElementById("taskList");
  list.innerHTML = "";

  // —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –Ω–∞–≤–µ—Ä—Ö—É ‚Üí —Ä–µ–Ω–¥–µ—Ä–∏–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const toRender = [...tasks].reverse();

  toRender.forEach(t => {
    /* <li class="task ..."> ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–¥–∞—á–∏ */
    const li = document.createElement("li");
    li.className = "task" + (t.done ? " done" : "");
    li.dataset.id = t.id;

    /* <input type="checkbox"> ‚Äî —á–µ–∫–±–æ–∫—Å —Å—Ç–∞—Ç—É—Å–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–Ω–µ—Ç) */
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = t.done;
    checkbox.addEventListener("change", () => toggleDone(t.id));

    /* <div class="title"> ‚Äî —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ */
    const title = document.createElement("div");
    title.className = "title";
    title.textContent = t.text;

    /* <span class="badge ..."> ‚Äî –±–µ–π–¥–∂ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (low/normal/high) */
    const priority = document.createElement("span");
    priority.className = "badge " + t.priority;
    priority.textContent = priorityLabel(t.priority);

    /* <div class="meta"> ‚Äî –º–µ—Ç–∞‚Äë–∏–Ω—Ñ–æ: –¥–∞—Ç–∞ + —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å */
    const meta = document.createElement("div");
    meta.className = "meta";
    meta.textContent = `${formatDate(t.createdAt)} ‚Äî ${t.done ? "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" : "üïì –í –ø—Ä–æ—Ü–µ—Å—Å–µ"}`;

    /* <button class="delete-btn"> ‚Äî –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */
    const del = document.createElement("button");
    del.className = "delete-btn";
    del.textContent = "Delete";
    del.addEventListener("click", () => deleteTask(t.id));

    /* –í–∫–ª–∞–¥—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä—å li –≤ —É–¥–æ–±–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ */
    li.appendChild(checkbox);  // —á–µ–∫–±–æ–∫—Å —Å–ª–µ–≤–∞
    li.appendChild(title);     // –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    li.appendChild(priority);  // –±–µ–π–¥–∂ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
    li.appendChild(meta);      // —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π/—Å—Ç–∞—Ç—É—Å–æ–º (–º–µ–ª–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º)
    li.appendChild(del);       // –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞

    /* –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π li –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */
    list.appendChild(li);
  });
}

/* ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —É—Ç–∏–ª–∏—Ç—ã ===== */
function saveTasks() {
  localStorage.setItem(LS_KEY, JSON.stringify(tasks));
}

function formatDate(ts) {
  const d = new Date(ts);
  // –ø—Ä–∏–º–µ—Ä: 10 –∞–≤–≥., 14:32 (—Ä—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å)
  return d.toLocaleString("ru-RU", { day: "2-digit", month: "short", hour: "2-digit", minute: "2-digit" });
}

function priorityLabel(p) {
  if (p === "low") return "Low";
  if (p === "high") return "High";
  return "Normal";
}

function cryptoRandomId() {
  if (window.crypto?.getRandomValues) {
    const arr = new Uint32Array(4);
    window.crypto.getRandomValues(arr);
    return Array.from(arr, n => n.toString(16)).join("");
  }
  return Math.random().toString(16).slice(2) + Date.now().toString(16);
}
